{{- if .Values.redis.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: redis
    {{- include "waylon.commonLabels" . | nindent 4 }}
    {{- with .Values.redis.labels }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- if .Values.redis.annotations }}
  annotations:
    {{- toYaml .Values.redis.annotations | nindent 4 }}
  {{- end }}
spec:
  serviceName: redis
  # hardcoded to 1 because we're not configuring clustering
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: redis
      {{- include "waylon.commonLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: redis
        {{- include "waylon.commonLabels" . | nindent 8 }}
    spec:
      {{- if .Values.redis.storage.hostPath }}
      volumes:
      - name: datadir
        persistentVolumeClaim:
          claimName: redis-data-pvc
      {{- end }}
      {{- if .Values.common.imagePullSecret -}}
      imagePullSecrets:
      - name: {{ .Values.common.imagePullSecret }}
      {{- end }}
      containers:
      - name: redis
        image: {{ .Values.redis.image }}
        imagePullPolicy: {{ .Values.redis.imagePullPolicy }}
        stdin: true
        tty: true
        command: {{ toYaml .Values.redis.command | nindent 8 }}
        {{- if .Values.common.strictSecurity }}
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          privileged: false
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
        {{- end }}
        resources:
          limits:
            memory: {{ .Values.redis.memoryLimit }}
            cpu: {{ .Values.redis.cpuLimit }}
          requests:
            memory: 8Mi
            cpu: 20m
        ports:
        - containerPort: 6379
          protocol: TCP
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "/usr/local/bin/redis-cli -h $(hostname) ping"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "/usr/local/bin/redis-cli -h $(hostname) ping"
          initialDelaySeconds: 30
          periodSeconds: 2
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        volumeMounts:
        - name: datadir
          mountPath: /data
  {{- if not .Values.redis.storage.hostPath }}
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: {{ .Values.redis.storage.capacity }}
      storageClassName: {{ .Values.redis.storage.class | quote }}
  {{- end -}}
{{- end -}}
